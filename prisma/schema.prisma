generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
}

model User {
  id              String            @id
  name            String
  username        String?           @unique
  email           String
  emailVerified   Boolean           @default(false)
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  sessions        Session[]
  accounts        Account[]
  questions       Question[]
  votes           Vote[]
  comments        Comment[]
  CommunityMember CommunityMember[]

  @@unique([email])
  @@map("user")
}

model Community {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  avatar          String?
  banner          String?
  question        Question[]
  CommunityMember CommunityMember[]
}

model CommunityMember {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  community   Community     @relation(fields: [communityId], references: [id])
  communityId String
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  type       VoteType
  createdAt  DateTime @default(now())
}

enum VoteType {
  UP
  DOWN
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  tags Tag[]
}

model Tag {
  id         String     @id @default(cuid())
  name       String     @unique
  questions  Question[]
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Question {
  id          String     @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  votes       Vote[]
  tags        Tag[]
  comments    Comment[]
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  replyToId  String?

  @@map("comment")
}
